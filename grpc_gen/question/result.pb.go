// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.0
// source: question/result.proto

package question

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	basic "query_rpc/grpc_gen/basic"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpResId    int64 `protobuf:"varint,1,opt,name=op_res_id,json=opResId,proto3" json:"op_res_id,omitempty"`
	QuestionId int64 `protobuf:"varint,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	OptionId   int64 `protobuf:"varint,3,opt,name=option_id,json=optionId,proto3" json:"option_id,omitempty"`
}

func (x *OptionResult) Reset() {
	*x = OptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionResult) ProtoMessage() {}

func (x *OptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionResult.ProtoReflect.Descriptor instead.
func (*OptionResult) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{0}
}

func (x *OptionResult) GetOpResId() int64 {
	if x != nil {
		return x.OpResId
	}
	return 0
}

func (x *OptionResult) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *OptionResult) GetOptionId() int64 {
	if x != nil {
		return x.OptionId
	}
	return 0
}

type BlankResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlResId    int64  `protobuf:"varint,1,opt,name=bl_res_id,json=blResId,proto3" json:"bl_res_id,omitempty"`
	QuestionId int64  `protobuf:"varint,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Result     string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	UesrId     int64  `protobuf:"varint,4,opt,name=uesr_id,json=uesrId,proto3" json:"uesr_id,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *BlankResult) Reset() {
	*x = BlankResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlankResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlankResult) ProtoMessage() {}

func (x *BlankResult) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlankResult.ProtoReflect.Descriptor instead.
func (*BlankResult) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{1}
}

func (x *BlankResult) GetBlResId() int64 {
	if x != nil {
		return x.BlResId
	}
	return 0
}

func (x *BlankResult) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *BlankResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *BlankResult) GetUesrId() int64 {
	if x != nil {
		return x.UesrId
	}
	return 0
}

func (x *BlankResult) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CommitQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId    int64           `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	UesrId     int64           `protobuf:"varint,2,opt,name=uesr_id,json=uesrId,proto3" json:"uesr_id,omitempty"`
	CreateTime int64           `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	OpRes      []*OptionResult `protobuf:"bytes,4,rep,name=op_res,json=opRes,proto3" json:"op_res,omitempty"` // 选择题答案数组
	BlRes      []*BlankResult  `protobuf:"bytes,5,rep,name=bl_res,json=blRes,proto3" json:"bl_res,omitempty"` // 填空题答案数组
}

func (x *CommitQueryReq) Reset() {
	*x = CommitQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitQueryReq) ProtoMessage() {}

func (x *CommitQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitQueryReq.ProtoReflect.Descriptor instead.
func (*CommitQueryReq) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{2}
}

func (x *CommitQueryReq) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *CommitQueryReq) GetUesrId() int64 {
	if x != nil {
		return x.UesrId
	}
	return 0
}

func (x *CommitQueryReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CommitQueryReq) GetOpRes() []*OptionResult {
	if x != nil {
		return x.OpRes
	}
	return nil
}

func (x *CommitQueryReq) GetBlRes() []*BlankResult {
	if x != nil {
		return x.BlRes
	}
	return nil
}

type CommitQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool            `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Resp *basic.RespBody `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *CommitQueryResp) Reset() {
	*x = CommitQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitQueryResp) ProtoMessage() {}

func (x *CommitQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitQueryResp.ProtoReflect.Descriptor instead.
func (*CommitQueryResp) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{3}
}

func (x *CommitQueryResp) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

func (x *CommitQueryResp) GetResp() *basic.RespBody {
	if x != nil {
		return x.Resp
	}
	return nil
}

// 查询结果相关
// 仅获取答案
type OptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId int64                   `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Total      int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`  // 参与问题总人数
	Result     []*OptionData_InnerData `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"` // 选择题答案
}

func (x *OptionData) Reset() {
	*x = OptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionData) ProtoMessage() {}

func (x *OptionData) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionData.ProtoReflect.Descriptor instead.
func (*OptionData) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{4}
}

func (x *OptionData) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *OptionData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OptionData) GetResult() []*OptionData_InnerData {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetResultByQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId int64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *GetResultByQueryReq) Reset() {
	*x = GetResultByQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultByQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultByQueryReq) ProtoMessage() {}

func (x *GetResultByQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultByQueryReq.ProtoReflect.Descriptor instead.
func (*GetResultByQueryReq) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{5}
}

func (x *GetResultByQueryReq) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

type GetResultByQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlRes []*BlankResult  `protobuf:"bytes,1,rep,name=bl_res,json=blRes,proto3" json:"bl_res,omitempty"` // 填空题答案
	OpRes []*OptionData   `protobuf:"bytes,2,rep,name=op_res,json=opRes,proto3" json:"op_res,omitempty"`
	Resp  *basic.RespBody `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *GetResultByQueryResp) Reset() {
	*x = GetResultByQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultByQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultByQueryResp) ProtoMessage() {}

func (x *GetResultByQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultByQueryResp.ProtoReflect.Descriptor instead.
func (*GetResultByQueryResp) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{6}
}

func (x *GetResultByQueryResp) GetBlRes() []*BlankResult {
	if x != nil {
		return x.BlRes
	}
	return nil
}

func (x *GetResultByQueryResp) GetOpRes() []*OptionData {
	if x != nil {
		return x.OpRes
	}
	return nil
}

func (x *GetResultByQueryResp) GetResp() *basic.RespBody {
	if x != nil {
		return x.Resp
	}
	return nil
}

type GetBlankResultByQuestionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId int64 `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	PageNum    int32 `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"` // 分页
}

func (x *GetBlankResultByQuestionReq) Reset() {
	*x = GetBlankResultByQuestionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlankResultByQuestionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlankResultByQuestionReq) ProtoMessage() {}

func (x *GetBlankResultByQuestionReq) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlankResultByQuestionReq.ProtoReflect.Descriptor instead.
func (*GetBlankResultByQuestionReq) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{7}
}

func (x *GetBlankResultByQuestionReq) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *GetBlankResultByQuestionReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetBlankResultByQuestionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BlankResult  `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"` // 填空题答案
	Resp   *basic.RespBody `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *GetBlankResultByQuestionResp) Reset() {
	*x = GetBlankResultByQuestionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlankResultByQuestionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlankResultByQuestionResp) ProtoMessage() {}

func (x *GetBlankResultByQuestionResp) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlankResultByQuestionResp.ProtoReflect.Descriptor instead.
func (*GetBlankResultByQuestionResp) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{8}
}

func (x *GetBlankResultByQuestionResp) GetResult() []*BlankResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetBlankResultByQuestionResp) GetResp() *basic.RespBody {
	if x != nil {
		return x.Resp
	}
	return nil
}

type GetOptionResultByQuestionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId int64 `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
}

func (x *GetOptionResultByQuestionReq) Reset() {
	*x = GetOptionResultByQuestionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionResultByQuestionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionResultByQuestionReq) ProtoMessage() {}

func (x *GetOptionResultByQuestionReq) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionResultByQuestionReq.ProtoReflect.Descriptor instead.
func (*GetOptionResultByQuestionReq) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{9}
}

func (x *GetOptionResultByQuestionReq) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

type GetOptionResultByQuestionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OptionData     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Resp *basic.RespBody `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *GetOptionResultByQuestionResp) Reset() {
	*x = GetOptionResultByQuestionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionResultByQuestionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionResultByQuestionResp) ProtoMessage() {}

func (x *GetOptionResultByQuestionResp) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionResultByQuestionResp.ProtoReflect.Descriptor instead.
func (*GetOptionResultByQuestionResp) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{10}
}

func (x *GetOptionResultByQuestionResp) GetData() *OptionData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetOptionResultByQuestionResp) GetResp() *basic.RespBody {
	if x != nil {
		return x.Resp
	}
	return nil
}

type OptionData_InnerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpId  int64 `protobuf:"varint,1,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // 选项选择人数
}

func (x *OptionData_InnerData) Reset() {
	*x = OptionData_InnerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_result_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionData_InnerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionData_InnerData) ProtoMessage() {}

func (x *OptionData_InnerData) ProtoReflect() protoreflect.Message {
	mi := &file_question_result_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionData_InnerData.ProtoReflect.Descriptor instead.
func (*OptionData_InnerData) Descriptor() ([]byte, []int) {
	return file_question_result_proto_rawDescGZIP(), []int{4, 0}
}

func (x *OptionData_InnerData) GetOpId() int64 {
	if x != nil {
		return x.OpId
	}
	return 0
}

func (x *OptionData_InnerData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_question_result_proto protoreflect.FileDescriptor

var file_question_result_proto_rawDesc = []byte{
	0x0a, 0x15, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9c, 0x01,
	0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x09, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x6c, 0x52, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x73, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x65, 0x73, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65,
	0x73, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x65, 0x73,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x62, 0x6c, 0x52, 0x65,
	0x73, 0x22, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0xb3, 0x01,
	0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x36, 0x0a, 0x09, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c,
	0x0a, 0x06, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x62, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x59,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x72, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x3f, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6e,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x32, 0x87,
	0x03, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x18, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_question_result_proto_rawDescOnce sync.Once
	file_question_result_proto_rawDescData = file_question_result_proto_rawDesc
)

func file_question_result_proto_rawDescGZIP() []byte {
	file_question_result_proto_rawDescOnce.Do(func() {
		file_question_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_question_result_proto_rawDescData)
	})
	return file_question_result_proto_rawDescData
}

var file_question_result_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_question_result_proto_goTypes = []interface{}{
	(*OptionResult)(nil),                  // 0: question.OptionResult
	(*BlankResult)(nil),                   // 1: question.BlankResult
	(*CommitQueryReq)(nil),                // 2: question.CommitQueryReq
	(*CommitQueryResp)(nil),               // 3: question.CommitQueryResp
	(*OptionData)(nil),                    // 4: question.OptionData
	(*GetResultByQueryReq)(nil),           // 5: question.GetResultByQueryReq
	(*GetResultByQueryResp)(nil),          // 6: question.GetResultByQueryResp
	(*GetBlankResultByQuestionReq)(nil),   // 7: question.GetBlankResultByQuestionReq
	(*GetBlankResultByQuestionResp)(nil),  // 8: question.GetBlankResultByQuestionResp
	(*GetOptionResultByQuestionReq)(nil),  // 9: question.GetOptionResultByQuestionReq
	(*GetOptionResultByQuestionResp)(nil), // 10: question.GetOptionResultByQuestionResp
	(*OptionData_InnerData)(nil),          // 11: question.OptionData.InnerData
	(*basic.RespBody)(nil),                // 12: basic.RespBody
}
var file_question_result_proto_depIdxs = []int32{
	0,  // 0: question.CommitQueryReq.op_res:type_name -> question.OptionResult
	1,  // 1: question.CommitQueryReq.bl_res:type_name -> question.BlankResult
	12, // 2: question.CommitQueryResp.resp:type_name -> basic.RespBody
	11, // 3: question.OptionData.result:type_name -> question.OptionData.InnerData
	1,  // 4: question.GetResultByQueryResp.bl_res:type_name -> question.BlankResult
	4,  // 5: question.GetResultByQueryResp.op_res:type_name -> question.OptionData
	12, // 6: question.GetResultByQueryResp.resp:type_name -> basic.RespBody
	1,  // 7: question.GetBlankResultByQuestionResp.result:type_name -> question.BlankResult
	12, // 8: question.GetBlankResultByQuestionResp.resp:type_name -> basic.RespBody
	4,  // 9: question.GetOptionResultByQuestionResp.data:type_name -> question.OptionData
	12, // 10: question.GetOptionResultByQuestionResp.resp:type_name -> basic.RespBody
	2,  // 11: question.ResultService.CommitQuery:input_type -> question.CommitQueryReq
	5,  // 12: question.ResultService.GetResultByQuery:input_type -> question.GetResultByQueryReq
	9,  // 13: question.ResultService.GetOptionResultByQuestion:input_type -> question.GetOptionResultByQuestionReq
	7,  // 14: question.ResultService.GetBlankResultByQuestion:input_type -> question.GetBlankResultByQuestionReq
	3,  // 15: question.ResultService.CommitQuery:output_type -> question.CommitQueryResp
	6,  // 16: question.ResultService.GetResultByQuery:output_type -> question.GetResultByQueryResp
	10, // 17: question.ResultService.GetOptionResultByQuestion:output_type -> question.GetOptionResultByQuestionResp
	8,  // 18: question.ResultService.GetBlankResultByQuestion:output_type -> question.GetBlankResultByQuestionResp
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_question_result_proto_init() }
func file_question_result_proto_init() {
	if File_question_result_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_question_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlankResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultByQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultByQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlankResultByQuestionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlankResultByQuestionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionResultByQuestionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionResultByQuestionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_result_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionData_InnerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_question_result_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_question_result_proto_goTypes,
		DependencyIndexes: file_question_result_proto_depIdxs,
		MessageInfos:      file_question_result_proto_msgTypes,
	}.Build()
	File_question_result_proto = out.File
	file_question_result_proto_rawDesc = nil
	file_question_result_proto_goTypes = nil
	file_question_result_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResultServiceClient is the client API for ResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResultServiceClient interface {
	// 提交问卷接口
	CommitQuery(ctx context.Context, in *CommitQueryReq, opts ...grpc.CallOption) (*CommitQueryResp, error)
	// 查询
	GetResultByQuery(ctx context.Context, in *GetResultByQueryReq, opts ...grpc.CallOption) (*GetResultByQueryResp, error)
	GetOptionResultByQuestion(ctx context.Context, in *GetOptionResultByQuestionReq, opts ...grpc.CallOption) (*GetOptionResultByQuestionResp, error)
	GetBlankResultByQuestion(ctx context.Context, in *GetBlankResultByQuestionReq, opts ...grpc.CallOption) (*GetBlankResultByQuestionResp, error)
}

type resultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResultServiceClient(cc grpc.ClientConnInterface) ResultServiceClient {
	return &resultServiceClient{cc}
}

func (c *resultServiceClient) CommitQuery(ctx context.Context, in *CommitQueryReq, opts ...grpc.CallOption) (*CommitQueryResp, error) {
	out := new(CommitQueryResp)
	err := c.cc.Invoke(ctx, "/question.ResultService/CommitQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetResultByQuery(ctx context.Context, in *GetResultByQueryReq, opts ...grpc.CallOption) (*GetResultByQueryResp, error) {
	out := new(GetResultByQueryResp)
	err := c.cc.Invoke(ctx, "/question.ResultService/GetResultByQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetOptionResultByQuestion(ctx context.Context, in *GetOptionResultByQuestionReq, opts ...grpc.CallOption) (*GetOptionResultByQuestionResp, error) {
	out := new(GetOptionResultByQuestionResp)
	err := c.cc.Invoke(ctx, "/question.ResultService/GetOptionResultByQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetBlankResultByQuestion(ctx context.Context, in *GetBlankResultByQuestionReq, opts ...grpc.CallOption) (*GetBlankResultByQuestionResp, error) {
	out := new(GetBlankResultByQuestionResp)
	err := c.cc.Invoke(ctx, "/question.ResultService/GetBlankResultByQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultServiceServer is the server API for ResultService service.
type ResultServiceServer interface {
	// 提交问卷接口
	CommitQuery(context.Context, *CommitQueryReq) (*CommitQueryResp, error)
	// 查询
	GetResultByQuery(context.Context, *GetResultByQueryReq) (*GetResultByQueryResp, error)
	GetOptionResultByQuestion(context.Context, *GetOptionResultByQuestionReq) (*GetOptionResultByQuestionResp, error)
	GetBlankResultByQuestion(context.Context, *GetBlankResultByQuestionReq) (*GetBlankResultByQuestionResp, error)
}

// UnimplementedResultServiceServer can be embedded to have forward compatible implementations.
type UnimplementedResultServiceServer struct {
}

func (*UnimplementedResultServiceServer) CommitQuery(context.Context, *CommitQueryReq) (*CommitQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitQuery not implemented")
}
func (*UnimplementedResultServiceServer) GetResultByQuery(context.Context, *GetResultByQueryReq) (*GetResultByQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultByQuery not implemented")
}
func (*UnimplementedResultServiceServer) GetOptionResultByQuestion(context.Context, *GetOptionResultByQuestionReq) (*GetOptionResultByQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptionResultByQuestion not implemented")
}
func (*UnimplementedResultServiceServer) GetBlankResultByQuestion(context.Context, *GetBlankResultByQuestionReq) (*GetBlankResultByQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlankResultByQuestion not implemented")
}

func RegisterResultServiceServer(s *grpc.Server, srv ResultServiceServer) {
	s.RegisterService(&_ResultService_serviceDesc, srv)
}

func _ResultService_CommitQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).CommitQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.ResultService/CommitQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).CommitQuery(ctx, req.(*CommitQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetResultByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultByQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetResultByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.ResultService/GetResultByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetResultByQuery(ctx, req.(*GetResultByQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetOptionResultByQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptionResultByQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetOptionResultByQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.ResultService/GetOptionResultByQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetOptionResultByQuestion(ctx, req.(*GetOptionResultByQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetBlankResultByQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlankResultByQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetBlankResultByQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.ResultService/GetBlankResultByQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetBlankResultByQuestion(ctx, req.(*GetBlankResultByQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResultService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "question.ResultService",
	HandlerType: (*ResultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitQuery",
			Handler:    _ResultService_CommitQuery_Handler,
		},
		{
			MethodName: "GetResultByQuery",
			Handler:    _ResultService_GetResultByQuery_Handler,
		},
		{
			MethodName: "GetOptionResultByQuestion",
			Handler:    _ResultService_GetOptionResultByQuestion_Handler,
		},
		{
			MethodName: "GetBlankResultByQuestion",
			Handler:    _ResultService_GetBlankResultByQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question/result.proto",
}
