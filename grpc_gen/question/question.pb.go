// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.0
// source: question/question.proto

package question

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	basic "query_rpc/grpc_gen/basic"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId       int64     `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	QueryId          int64     `protobuf:"varint,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QuestionName     string    `protobuf:"bytes,3,opt,name=question_name,json=questionName,proto3" json:"question_name,omitempty"`
	QuestionDescribe string    `protobuf:"bytes,4,opt,name=question_describe,json=questionDescribe,proto3" json:"question_describe,omitempty"`
	Mandatory        bool      `protobuf:"varint,5,opt,name=mandatory,proto3" json:"mandatory,omitempty"`                           // 是否必答
	Display          int32     `protobuf:"varint,6,opt,name=display,proto3" json:"display,omitempty"`                               // 问题展示方式，用于关联、跳题逻辑的前端展示 1：不展示 2：展示 3：作废展示
	Verify           int32     `protobuf:"varint,7,opt,name=verify,proto3" json:"verify,omitempty"`                                 // 验证，仅用于填空题：1：纯数字，2：身份证，3：email，4：手机号
	Number           int32     `protobuf:"varint,8,opt,name=number,proto3" json:"number,omitempty"`                                 // 问卷中的题号
	QuestionType     int32     `protobuf:"varint,9,opt,name=question_type,json=questionType,proto3" json:"question_type,omitempty"` // 1: 单选，2：多选，3：单行填空，4：多行填空
	OpInfo           []*Option `protobuf:"bytes,10,rep,name=op_info,json=opInfo,proto3" json:"op_info,omitempty"`                   // 选择题详细信息
	BlInfo           *Blank    `protobuf:"bytes,11,opt,name=bl_info,json=blInfo,proto3" json:"bl_info,omitempty"`                   // 填空题详细信息
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{0}
}

func (x *Question) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *Question) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *Question) GetQuestionName() string {
	if x != nil {
		return x.QuestionName
	}
	return ""
}

func (x *Question) GetQuestionDescribe() string {
	if x != nil {
		return x.QuestionDescribe
	}
	return ""
}

func (x *Question) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

func (x *Question) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *Question) GetVerify() int32 {
	if x != nil {
		return x.Verify
	}
	return 0
}

func (x *Question) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Question) GetQuestionType() int32 {
	if x != nil {
		return x.QuestionType
	}
	return 0
}

func (x *Question) GetOpInfo() []*Option {
	if x != nil {
		return x.OpInfo
	}
	return nil
}

func (x *Question) GetBlInfo() *Blank {
	if x != nil {
		return x.BlInfo
	}
	return nil
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpId       int64   `protobuf:"varint,1,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OptionText string  `protobuf:"bytes,2,opt,name=option_text,json=optionText,proto3" json:"option_text,omitempty"`
	OptionName string  `protobuf:"bytes,3,opt,name=option_name,json=optionName,proto3" json:"option_name,omitempty"`
	Correct    bool    `protobuf:"varint,4,opt,name=correct,proto3" json:"correct,omitempty"`                      // 是否为正确答案
	IsMultipy  bool    `protobuf:"varint,5,opt,name=is_multipy,json=isMultipy,proto3" json:"is_multipy,omitempty"` // 是否多选
	QuestionId int64   `protobuf:"varint,6,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	JumpId     int64   `protobuf:"varint,7,opt,name=jump_id,json=jumpId,proto3" json:"jump_id,omitempty"`
	RelateIds  []int64 `protobuf:"varint,8,rep,packed,name=relate_ids,json=relateIds,proto3" json:"relate_ids,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{1}
}

func (x *Option) GetOpId() int64 {
	if x != nil {
		return x.OpId
	}
	return 0
}

func (x *Option) GetOptionText() string {
	if x != nil {
		return x.OptionText
	}
	return ""
}

func (x *Option) GetOptionName() string {
	if x != nil {
		return x.OptionName
	}
	return ""
}

func (x *Option) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

func (x *Option) GetIsMultipy() bool {
	if x != nil {
		return x.IsMultipy
	}
	return false
}

func (x *Option) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *Option) GetJumpId() int64 {
	if x != nil {
		return x.JumpId
	}
	return 0
}

func (x *Option) GetRelateIds() []int64 {
	if x != nil {
		return x.RelateIds
	}
	return nil
}

type Blank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlankId      int64 `protobuf:"varint,1,opt,name=blank_id,json=blankId,proto3" json:"blank_id,omitempty"`
	PrivateCheck bool  `protobuf:"varint,2,opt,name=private_check,json=privateCheck,proto3" json:"private_check,omitempty"` // 是否需要加密展示
	UniqueCheck  bool  `protobuf:"varint,3,opt,name=unique_check,json=uniqueCheck,proto3" json:"unique_check,omitempty"`    // 是否不可重复
	QuestionId   int64 `protobuf:"varint,4,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	LenLimit     int32 `protobuf:"varint,5,opt,name=len_limit,json=lenLimit,proto3" json:"len_limit,omitempty"`
}

func (x *Blank) Reset() {
	*x = Blank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blank) ProtoMessage() {}

func (x *Blank) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blank.ProtoReflect.Descriptor instead.
func (*Blank) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{2}
}

func (x *Blank) GetBlankId() int64 {
	if x != nil {
		return x.BlankId
	}
	return 0
}

func (x *Blank) GetPrivateCheck() bool {
	if x != nil {
		return x.PrivateCheck
	}
	return false
}

func (x *Blank) GetUniqueCheck() bool {
	if x != nil {
		return x.UniqueCheck
	}
	return false
}

func (x *Blank) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *Blank) GetLenLimit() int32 {
	if x != nil {
		return x.LenLimit
	}
	return 0
}

type SetQuestionBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question []*Question `protobuf:"bytes,1,rep,name=question,proto3" json:"question,omitempty"`
}

func (x *SetQuestionBatchReq) Reset() {
	*x = SetQuestionBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuestionBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuestionBatchReq) ProtoMessage() {}

func (x *SetQuestionBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuestionBatchReq.ProtoReflect.Descriptor instead.
func (*SetQuestionBatchReq) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{3}
}

func (x *SetQuestionBatchReq) GetQuestion() []*Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type SetQuestionBatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool            `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Resp *basic.RespBody `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *SetQuestionBatchResp) Reset() {
	*x = SetQuestionBatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuestionBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuestionBatchResp) ProtoMessage() {}

func (x *SetQuestionBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuestionBatchResp.ProtoReflect.Descriptor instead.
func (*SetQuestionBatchResp) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{4}
}

func (x *SetQuestionBatchResp) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

func (x *SetQuestionBatchResp) GetResp() *basic.RespBody {
	if x != nil {
		return x.Resp
	}
	return nil
}

// 获取根据id获取单个问题详细信息
type GetQuestionSingleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId int64 `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
}

func (x *GetQuestionSingleReq) Reset() {
	*x = GetQuestionSingleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionSingleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionSingleReq) ProtoMessage() {}

func (x *GetQuestionSingleReq) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionSingleReq.ProtoReflect.Descriptor instead.
func (*GetQuestionSingleReq) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{5}
}

func (x *GetQuestionSingleReq) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

type GetQuestionSingleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question *Question       `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Resp     *basic.RespBody `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *GetQuestionSingleResp) Reset() {
	*x = GetQuestionSingleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionSingleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionSingleResp) ProtoMessage() {}

func (x *GetQuestionSingleResp) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionSingleResp.ProtoReflect.Descriptor instead.
func (*GetQuestionSingleResp) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{6}
}

func (x *GetQuestionSingleResp) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *GetQuestionSingleResp) GetResp() *basic.RespBody {
	if x != nil {
		return x.Resp
	}
	return nil
}

// 获取问卷下全部问题
type GetQuestionBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId int64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *GetQuestionBatchReq) Reset() {
	*x = GetQuestionBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionBatchReq) ProtoMessage() {}

func (x *GetQuestionBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionBatchReq.ProtoReflect.Descriptor instead.
func (*GetQuestionBatchReq) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{7}
}

func (x *GetQuestionBatchReq) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

type GetQuestionBatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question     `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
	Resp      *basic.RespBody `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *GetQuestionBatchResp) Reset() {
	*x = GetQuestionBatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_question_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionBatchResp) ProtoMessage() {}

func (x *GetQuestionBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_question_question_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionBatchResp.ProtoReflect.Descriptor instead.
func (*GetQuestionBatchResp) Descriptor() ([]byte, []int) {
	return file_question_question_proto_rawDescGZIP(), []int{8}
}

func (x *GetQuestionBatchResp) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *GetQuestionBatchResp) GetResp() *basic.RespBody {
	if x != nil {
		return x.Resp
	}
	return nil
}

var File_question_question_proto protoreflect.FileDescriptor

var file_question_question_proto_rawDesc = []byte{
	0x0a, 0x17, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x02, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a,
	0x05, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x6e, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x22, 0x30, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x32, 0x93, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_question_question_proto_rawDescOnce sync.Once
	file_question_question_proto_rawDescData = file_question_question_proto_rawDesc
)

func file_question_question_proto_rawDescGZIP() []byte {
	file_question_question_proto_rawDescOnce.Do(func() {
		file_question_question_proto_rawDescData = protoimpl.X.CompressGZIP(file_question_question_proto_rawDescData)
	})
	return file_question_question_proto_rawDescData
}

var file_question_question_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_question_question_proto_goTypes = []interface{}{
	(*Question)(nil),              // 0: question.Question
	(*Option)(nil),                // 1: question.Option
	(*Blank)(nil),                 // 2: question.Blank
	(*SetQuestionBatchReq)(nil),   // 3: question.SetQuestionBatchReq
	(*SetQuestionBatchResp)(nil),  // 4: question.SetQuestionBatchResp
	(*GetQuestionSingleReq)(nil),  // 5: question.GetQuestionSingleReq
	(*GetQuestionSingleResp)(nil), // 6: question.GetQuestionSingleResp
	(*GetQuestionBatchReq)(nil),   // 7: question.GetQuestionBatchReq
	(*GetQuestionBatchResp)(nil),  // 8: question.GetQuestionBatchResp
	(*basic.RespBody)(nil),        // 9: basic.RespBody
}
var file_question_question_proto_depIdxs = []int32{
	1,  // 0: question.Question.op_info:type_name -> question.Option
	2,  // 1: question.Question.bl_info:type_name -> question.Blank
	0,  // 2: question.SetQuestionBatchReq.question:type_name -> question.Question
	9,  // 3: question.SetQuestionBatchResp.resp:type_name -> basic.RespBody
	0,  // 4: question.GetQuestionSingleResp.question:type_name -> question.Question
	9,  // 5: question.GetQuestionSingleResp.resp:type_name -> basic.RespBody
	0,  // 6: question.GetQuestionBatchResp.questions:type_name -> question.Question
	9,  // 7: question.GetQuestionBatchResp.resp:type_name -> basic.RespBody
	3,  // 8: question.QuestionService.SetQuestionBatch:input_type -> question.SetQuestionBatchReq
	5,  // 9: question.QuestionService.GetQuestionSingle:input_type -> question.GetQuestionSingleReq
	7,  // 10: question.QuestionService.GetQuestionBatch:input_type -> question.GetQuestionBatchReq
	4,  // 11: question.QuestionService.SetQuestionBatch:output_type -> question.SetQuestionBatchResp
	6,  // 12: question.QuestionService.GetQuestionSingle:output_type -> question.GetQuestionSingleResp
	8,  // 13: question.QuestionService.GetQuestionBatch:output_type -> question.GetQuestionBatchResp
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_question_question_proto_init() }
func file_question_question_proto_init() {
	if File_question_question_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_question_question_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuestionBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuestionBatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionSingleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionSingleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_question_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionBatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_question_question_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_question_question_proto_goTypes,
		DependencyIndexes: file_question_question_proto_depIdxs,
		MessageInfos:      file_question_question_proto_msgTypes,
	}.Build()
	File_question_question_proto = out.File
	file_question_question_proto_rawDesc = nil
	file_question_question_proto_goTypes = nil
	file_question_question_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuestionServiceClient interface {
	// set接口，若已经存在则删除存新的
	SetQuestionBatch(ctx context.Context, in *SetQuestionBatchReq, opts ...grpc.CallOption) (*SetQuestionBatchResp, error)
	GetQuestionSingle(ctx context.Context, in *GetQuestionSingleReq, opts ...grpc.CallOption) (*GetQuestionSingleResp, error)
	GetQuestionBatch(ctx context.Context, in *GetQuestionBatchReq, opts ...grpc.CallOption) (*GetQuestionBatchResp, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) SetQuestionBatch(ctx context.Context, in *SetQuestionBatchReq, opts ...grpc.CallOption) (*SetQuestionBatchResp, error) {
	out := new(SetQuestionBatchResp)
	err := c.cc.Invoke(ctx, "/question.QuestionService/SetQuestionBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestionSingle(ctx context.Context, in *GetQuestionSingleReq, opts ...grpc.CallOption) (*GetQuestionSingleResp, error) {
	out := new(GetQuestionSingleResp)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetQuestionSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestionBatch(ctx context.Context, in *GetQuestionBatchReq, opts ...grpc.CallOption) (*GetQuestionBatchResp, error) {
	out := new(GetQuestionBatchResp)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetQuestionBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
type QuestionServiceServer interface {
	// set接口，若已经存在则删除存新的
	SetQuestionBatch(context.Context, *SetQuestionBatchReq) (*SetQuestionBatchResp, error)
	GetQuestionSingle(context.Context, *GetQuestionSingleReq) (*GetQuestionSingleResp, error)
	GetQuestionBatch(context.Context, *GetQuestionBatchReq) (*GetQuestionBatchResp, error)
}

// UnimplementedQuestionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (*UnimplementedQuestionServiceServer) SetQuestionBatch(context.Context, *SetQuestionBatchReq) (*SetQuestionBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQuestionBatch not implemented")
}
func (*UnimplementedQuestionServiceServer) GetQuestionSingle(context.Context, *GetQuestionSingleReq) (*GetQuestionSingleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionSingle not implemented")
}
func (*UnimplementedQuestionServiceServer) GetQuestionBatch(context.Context, *GetQuestionBatchReq) (*GetQuestionBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionBatch not implemented")
}

func RegisterQuestionServiceServer(s *grpc.Server, srv QuestionServiceServer) {
	s.RegisterService(&_QuestionService_serviceDesc, srv)
}

func _QuestionService_SetQuestionBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQuestionBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).SetQuestionBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/SetQuestionBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).SetQuestionBatch(ctx, req.(*SetQuestionBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestionSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionSingleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestionSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetQuestionSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestionSingle(ctx, req.(*GetQuestionSingleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestionBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestionBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetQuestionBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestionBatch(ctx, req.(*GetQuestionBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuestionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "question.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetQuestionBatch",
			Handler:    _QuestionService_SetQuestionBatch_Handler,
		},
		{
			MethodName: "GetQuestionSingle",
			Handler:    _QuestionService_GetQuestionSingle_Handler,
		},
		{
			MethodName: "GetQuestionBatch",
			Handler:    _QuestionService_GetQuestionBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question/question.proto",
}
